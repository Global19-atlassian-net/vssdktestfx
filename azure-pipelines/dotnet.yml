steps:
# We use VSBuild instead of "dotnet build" on Windows where MicroBuild tasks have to run (since they don't support MSBuild Core yet).
- task: VSBuild@1
  displayName: Build Visual Studio solution
  inputs:
    msbuildArgs: /t:build,pack /m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/msbuild.binlog"
    platform: Any CPU
    configuration: $(BuildConfiguration)

- task: DotNetCoreCLI@2
  displayName: dotnet test
  inputs:
    command: test
    arguments: --no-build -c $(BuildConfiguration) --filter "TestCategory!=FailsInCloudTest" -v n /p:CollectCoverage=true
    workingDirectory: src

- task: PowerShell@2
  inputs:
    filePath: azure-pipelines/variables/_pipelines.ps1
    failOnStderr: true
  displayName: Update pipeline variables based on build outputs
  condition: succeededOrFailed()

- task: PowerShell@2
  inputs:
    filePath: azure-pipelines/artifacts/_pipelines.ps1
    arguments: -ArtifactNameSuffix "-$(Agent.JobName)"
  displayName: Publish artifacts
  condition: succeededOrFailed()

- task: PublishSymbols@2
  inputs:
    SymbolsFolder: $(Build.ArtifactStagingDirectory)/symbols-Windows
    SearchPattern: '**/*.pdb'
    IndexSources: false
    SymbolServerType: TeamServices
  displayName: Publish symbols to symbol server
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- bash: bash <(curl -s https://codecov.io/bash)
  displayName: Publish code coverage results to codecov.io
  condition: ne(variables['codecov_token'], '')
  timeoutInMinutes: 3
  continueOnError: true
